using Business.Interfaces;
using Business.Models;
using Business.Services;
using Moq;
using System.Net;

namespace Presentation.Console.MainApp.Tests.Services;

public class FileService_Tests
{
    private readonly Mock<IFileService> _fileServiceMock;
    private readonly IContactService _contactService;

    public FileService_Tests() //use a constructor to instatiate the two items above.
    {
        _fileServiceMock = new Mock<IFileService>();
        _contactService = new ContactService(_fileServiceMock.Object);
    }
     
    [Fact]

    public void FileService_SaveListToFile_ShouldAddContactToListAndSaveToFile()
    {
        //Arrange
        var contactRegistrationForm = new ContactRegistrationForm();

        _fileServiceMock
            .Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Verifiable(); // code generated by CHAT GTP.The "Return(true)" was throwing an error as the "SaveListToFile" is a void method, it doesn't return a value.

        //Act
        var result = _contactService.CreateNewContact(contactRegistrationForm);

        //Assert
        Assert.True(result);
        _fileServiceMock.Verify(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()), Times.Once);

    }


    [Fact]

    public void FileService_LoadListFromFile_ShouldShowListOfContactsSavedInFile()
    {
        //Arrange
        var contactRegistrationForm = new ContactRegistrationForm();

        _fileServiceMock
            .Setup(fs => fs.LoadListFromFile())
            .Returns(new List<Contact>
    {
                new Contact
                {
                    FirstName = "John",
                    LastName = "Doe",
                    Email = "john.doe@example.com",
                    PhoneNumber = "1234567890",
                    Address = "123 Main St",
                    PostNumber = "12345",
                    City = "SampleCity"
                }
            }); //code generated by Chat GPT.
                //The method should be returning a List<Contact> as specified in IFileService

        //Act
        var result = _contactService.GetAll();


        //Assert
        Assert.NotNull(result); //Generated by CHAT GPT. It Checks that "result" has a value
        Assert.Single(result); // Generated by CHAT GPT. It Checks that one contact is returned
        Assert.Equal("John", result.First().FirstName); //Generated by CHAT GPT.It Verifies the contact's details

        _fileServiceMock.Verify(fs => fs.LoadListFromFile(), Times.Once);
    }

}
